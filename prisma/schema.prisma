// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Sheet {
    id        Int      @id @default(autoincrement())
    userId       String @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Info
    name      String
    player    String
    sex       String
    life      Int
    sanity    Int
    perception Int
    
    // State
    dying Boolean
    unconscious Boolean
    
    // Attributes
    for Int
    con Int
    agi Int
    int Int
    pre Int

    // Skills
    burglary Int
    acrobatics Int
    athletics Int
    arts Int
    animal_handling Int
    fighting Int
    stealth Int
    defense Int
    search Int
    crime Int
    aim Int
    fortitude Int
    science Int
    deception Int
    reflexes Int
    survival Int
    driving Int
    initiative Int
    intuition Int
    intimidation Int
    medicine Int
    persuasion Int
    religion Int
    technologies Int

    // Inventory
    hand_slot1 String
    hand_slot2 String
    pocket_slot1 String
    pocket_slot2 String
    backpack_slot1 String
    backpack_slot2 String
    backpack_slot3 String
    backpack_slot4 String
    backpack_slot5 String
    backpack_slot6 String
    backpack_slot7 String
    backpack_slot8 String
    backpack_slot9 String
    backpack_slot10 String
    backpack_slot11 String
    backpack_slot12 String

    // Past
    past String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
	@@map("Sheet")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Sheet         Sheet?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
